/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { BlacklistResponse, Uint128, Cw721DepositResponse, Cw721Deposit, Coin, Cw721HookMsg, ExecuteMsg, Binary, Cw721ReceiveMsg, InstantiateMsg, MigrateMsg, NftContractsResponse, OfferResponse, Offer, QueryMsg } from "./NftWallet.types";
export interface NftWalletReadOnlyInterface {
  contractAddress: string;
  cw721Deposits: ({
    address,
    contract
  }: {
    address: string;
    contract: string;
  }) => Promise<Cw721DepositsResponse>;
  offers: ({
    cw721Contract,
    owner
  }: {
    cw721Contract: string;
    owner: string;
  }) => Promise<OffersResponse>;
  getNftContracts: ({
    owner
  }: {
    owner: string;
  }) => Promise<GetNftContractsResponse>;
  getBlacklist: () => Promise<GetBlacklistResponse>;
}
export class NftWalletQueryClient implements NftWalletReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.cw721Deposits = this.cw721Deposits.bind(this);
    this.offers = this.offers.bind(this);
    this.getNftContracts = this.getNftContracts.bind(this);
    this.getBlacklist = this.getBlacklist.bind(this);
  }

  cw721Deposits = async ({
    address,
    contract
  }: {
    address: string;
    contract: string;
  }): Promise<Cw721DepositsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      cw721_deposits: {
        address,
        contract
      }
    });
  };
  offers = async ({
    cw721Contract,
    owner
  }: {
    cw721Contract: string;
    owner: string;
  }): Promise<OffersResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      offers: {
        cw721_contract: cw721Contract,
        owner
      }
    });
  };
  getNftContracts = async ({
    owner
  }: {
    owner: string;
  }): Promise<GetNftContractsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_nft_contracts: {
        owner
      }
    });
  };
  getBlacklist = async (): Promise<GetBlacklistResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_blacklist: {}
    });
  };
}
export interface NftWalletInterface extends NftWalletReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateAdmin: ({
    admin
  }: {
    admin: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  receiveNft: ({
    msg,
    sender,
    tokenId
  }: {
    msg: Binary;
    sender: string;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  withdrawNft: ({
    contract,
    tokenId
  }: {
    contract: string;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  submitOffer: ({
    cw721Contract,
    nftOwner,
    tokenId
  }: {
    cw721Contract: string;
    nftOwner: string;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  withdrawOffer: ({
    cw721Contract,
    tokenId
  }: {
    cw721Contract: string;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  addToBlacklist: ({
    address
  }: {
    address: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  removeFromBlacklist: ({
    address
  }: {
    address: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  acceptOffer: ({
    bidderAddress,
    cw721Contract,
    tokenId
  }: {
    bidderAddress: string;
    cw721Contract: string;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class NftWalletClient extends NftWalletQueryClient implements NftWalletInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateAdmin = this.updateAdmin.bind(this);
    this.receiveNft = this.receiveNft.bind(this);
    this.withdrawNft = this.withdrawNft.bind(this);
    this.submitOffer = this.submitOffer.bind(this);
    this.withdrawOffer = this.withdrawOffer.bind(this);
    this.addToBlacklist = this.addToBlacklist.bind(this);
    this.removeFromBlacklist = this.removeFromBlacklist.bind(this);
    this.acceptOffer = this.acceptOffer.bind(this);
  }

  updateAdmin = async ({
    admin
  }: {
    admin: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_admin: {
        admin
      }
    }, fee, memo, funds);
  };
  receiveNft = async ({
    msg,
    sender,
    tokenId
  }: {
    msg: Binary;
    sender: string;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive_nft: {
        msg,
        sender,
        token_id: tokenId
      }
    }, fee, memo, funds);
  };
  withdrawNft = async ({
    contract,
    tokenId
  }: {
    contract: string;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw_nft: {
        contract,
        token_id: tokenId
      }
    }, fee, memo, funds);
  };
  submitOffer = async ({
    cw721Contract,
    nftOwner,
    tokenId
  }: {
    cw721Contract: string;
    nftOwner: string;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      submit_offer: {
        cw721_contract: cw721Contract,
        nft_owner: nftOwner,
        token_id: tokenId
      }
    }, fee, memo, funds);
  };
  withdrawOffer = async ({
    cw721Contract,
    tokenId
  }: {
    cw721Contract: string;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw_offer: {
        cw721_contract: cw721Contract,
        token_id: tokenId
      }
    }, fee, memo, funds);
  };
  addToBlacklist = async ({
    address
  }: {
    address: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      add_to_blacklist: {
        address
      }
    }, fee, memo, funds);
  };
  removeFromBlacklist = async ({
    address
  }: {
    address: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_from_blacklist: {
        address
      }
    }, fee, memo, funds);
  };
  acceptOffer = async ({
    bidderAddress,
    cw721Contract,
    tokenId
  }: {
    bidderAddress: string;
    cw721Contract: string;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      accept_offer: {
        bidder_address: bidderAddress,
        cw721_contract: cw721Contract,
        token_id: tokenId
      }
    }, fee, memo, funds);
  };
}